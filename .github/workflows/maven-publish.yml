# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven App

on:
  workflow_dispatch
  
permissions:
  contents: read   # Only allows read access to repository content
  issues: write    # Allows write access to issues (if needed)
  pull-requests: write  # Allows write access to pull requests (if needed)
  actions: read    # Allows read access to Actions API

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: mvn -f java-maven-sonar-argocd-helm-k8s/spring-boot-app/pom.xml clean package

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-web.jar
        path: /home/runner/work/Jenkins-Zero-To-Hero/Jenkins-Zero-To-Hero/java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/spring-boot-web.jar


  snyk-security:
   runs-on: ubuntu-latest

   steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Install Snyk CLI
    - name: Install Snyk CLI
      run: npm install -g snyk

    # Step 3: Authenticate with Snyk
    - name: Authenticate with Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    # Step 4: Run Snyk SAST (Code scanning) with continue-on-error in GitHub Actions
    - name: Run Snyk to check for vulnerabilities in the code (SAST)
      run: snyk code test --continue-on-error
      continue-on-error: true  # This ensures the job continues even if vulnerabilities are found

    # Step 5: Run Snyk to check for vulnerabilities in all projects (SCA)
    - name: Run Snyk to check for vulnerabilities in all projects
      run: snyk test --all-projects --continue-on-error
      continue-on-error: true  # This ensures the job continues even if vulnerabilities are found

    - name: Upload scan results to Snyk UI
      run: snyk monitor --all-projects  # Uploads results to the Snyk dashboard


  depchecktest:
    runs-on: ubuntu-latest
    name: depecheck_test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build project with Maven
        run: mvn clean install
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: 'maven-app'
          path: '.'
          format: 'HTML'
          out: 'reports' # this is the default, no need to specify unless you wish to override it
          args: >
            --failOnCVSS 7
            --enableRetired
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
           name: Depcheck report
           path: ${{github.workspace}}/reports

  
  
  build-and-push-docker-image:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-web.jar
        
      - name: List Downloaded File
        run: ls -al $GITHUB_WORKSPACE
        
      - name: cd workspace 
        run: cd $GITHUB_WORKSPACE
        
      - name: Rename Downloaded File
        run: mv spring-boot-web.jar app.jar

      - name: Rename Downloaded File
        run: ls -al   
        
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Docker image
        run:  docker buildx build -t davidayo97/maven-app:${GITHUB_SHA} .

      - name: Show Docker images
        run: docker images

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: docker push davidayo97/maven-app:${GITHUB_SHA}

  ssh-ec2:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Add EC2 host to known hosts
        run: |
          ssh-keyscan -H 18.206.224.231 >> ~/.ssh/known_hosts

      - name: SSH into EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@18.206.224.231 "echo 'Successfully logged in!'"
          
      - name: Pull Docker Image on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@18.206.224.231 "docker pull davidayo97/maven-app:${GITHUB_SHA}"

  
      

    
